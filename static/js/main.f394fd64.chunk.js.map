{"version":3,"sources":["serviceWorker.js","AddTodoForm.js","EditForm.js","TodoItem.js","TodoList.js","VisibleTodoList.js","actions/types.js","actions/list.js","TodoApp.js","App.js","reducers/listReducer.js","reducers/visFilterReducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","AddTodoForm","props","handleChange","e","taskName","setState","target","name","value","handleSubmit","task","preventDefault","add","parent","styles","inputMargin","style","autoComplete","type","placeholder","this","onChange","onClick","Component","display","flexDirection","marginBottom","EditForm","id","updatedTask","completedStatus","edit","toggleForm","newTask","todoId","TodoItem","toggleEditForm","isEditFormOn","handleRemove","x","remove","handleEdit","handleFinished","completionStatus","toggleCompletion","todoItem","button","completed","margin","marginLeft","textDecoration","TodoList","list","map","item","key","VisibleTodoList","onSetVisibilityFilter","getVisibleTodos","filter","Error","connect","vis","dispatch","setVisibilityFilter","TodoApp","container","onAddTodo","onRemoveTodo","onEditTodo","onComplete","alignItems","payload","addTodo","updatedTodo","editTodo","App","initialState","uuid","listReducer","action","completedTodo","visFilterReducer","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f394fd64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class AddTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskName: ''\n    };\n  }\n\n  handleChange = e => {\n    console.log(this.state.taskName);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = (e, task) => {\n    e.preventDefault();\n\n    //dispatch ADD_TODO action\n    this.props.add(task);\n\n    //clearform\n    this.setState({\n      taskName: ''\n    });\n  };\n\n  render() {\n    const { parent, inputMargin } = styles;\n    return (\n      <form style={parent}>\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          placeholder=\"Enter a Task\"\n          name=\"taskName\"\n          value={this.state.taskName}\n          onChange={this.handleChange}\n          style={inputMargin}\n        />\n        <button onClick={e => this.handleSubmit(e, this.state.taskName)}>\n          Add New Todo\n        </button>\n      </form>\n    );\n  }\n}\n\nconst styles = {\n  parent: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  inputMargin: {\n    marginBottom: '0.5em'\n  }\n};\n","import React, { Component } from 'react';\n\nexport default class EditForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTask: this.props.task\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = (e, id, updatedTask, completedStatus) => {\n    e.preventDefault();\n    // console.log('FROM EDIT FORM', id, updatedTask);\n    this.props.edit(id, updatedTask, completedStatus);\n    //Close form after Submitting Revised TodoItem\n    this.props.toggleForm();\n  };\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          name=\"newTask\"\n          autoComplete=\"off\"\n          onChange={this.handleChange}\n          value={this.state.newTask}\n        />\n        <button\n          onClick={e =>\n            this.handleSubmit(\n              e,\n              this.props.todoId,\n              this.state.newTask,\n              this.props.completedStatus\n            )\n          }\n        >\n          Save Change\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport EditForm from './EditForm';\n\nexport default class TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditFormOn: false\n    };\n  }\n\n  toggleEditForm = () => {\n    this.setState({\n      isEditFormOn: !this.state.isEditFormOn\n    });\n  };\n\n  // Able to select item based on id\n  handleRemove = x => {\n    this.props.remove(x);\n  };\n\n  handleEdit = (id, newTask) => {\n    this.props.edit(id, newTask);\n  };\n\n  handleFinished = (id, task, completionStatus) => {\n    this.props.toggleCompletion(id, task, completionStatus);\n  };\n\n  render() {\n    const { todoItem, button, completed } = styles;\n\n    return (\n      <li style={todoItem}>\n        {this.state.isEditFormOn ? (\n          <EditForm\n            task={this.props.task}\n            todoId={this.props.todoId}\n            edit={this.props.edit}\n            toggleForm={this.toggleEditForm}\n            completedStatus={this.props.completedStatus}\n          />\n        ) : (\n          <strong style={this.props.completedStatus ? completed : null}>\n            {this.props.task}\n          </strong>\n        )}\n        <span>\n          {this.state.isEditFormOn ? null : (\n            <>\n              <button\n                style={button}\n                onClick={() =>\n                  this.handleFinished(\n                    this.props.todoId,\n                    this.props.task,\n                    this.props.completedStatus\n                  )\n                }\n              >\n                Completed\n              </button>\n\n              <button\n                onClick={() => this.handleRemove(this.props.todoId)}\n                style={button}\n              >\n                Delete\n              </button>\n            </>\n          )}\n\n          <button\n            onClick={() => this.toggleEditForm(this.props.todoId)}\n            style={button}\n          >\n            {this.state.isEditFormOn ? `Go Back` : `Edit`}\n          </button>\n        </span>\n      </li>\n    );\n  }\n}\n\nconst styles = {\n  todoItem: {\n    display: 'flex',\n    flexDirection: 'row',\n    margin: '1em'\n  },\n  button: {\n    marginLeft: '1em'\n  },\n  completed: {\n    textDecoration: 'line-through'\n  }\n};\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends Component {\n  render() {\n    console.log('props', this.props);\n    return (\n      <ul>\n        {this.props.list.map(item => (\n          // console.log('item.id', item.id),\n          <TodoItem\n            remove={this.props.remove}\n            key={item.id}\n            todoId={item.id}\n            task={item.task}\n            edit={this.props.edit}\n            completedStatus={item.completed}\n            toggleCompletion={this.props.toggleCompletion}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_NOT_COMPLETED } from './actions/types';\nimport { setVisibilityFilter } from './actions/list';\nimport TodoList from './TodoList';\n\nclass VisibleTodoList extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList\n          remove={this.props.remove}\n          list={this.props.list}\n          edit={this.props.edit}\n          toggleCompletion={this.props.toggleCompletion}\n        />\n        <button onClick={() => this.props.onSetVisibilityFilter(SHOW_ALL)}>\n          Show All\n        </button>\n        <button\n          onClick={() => this.props.onSetVisibilityFilter(SHOW_COMPLETED)}\n        >\n          Show Completed\n        </button>\n        <button\n          onClick={() => this.props.onSetVisibilityFilter(SHOW_NOT_COMPLETED)}\n        >\n          Show Uncompleted\n        </button>\n      </div>\n    );\n  }\n}\n\n//- Custom Fxn/reducer that changes value of list, depending on VISIBILITY_FILTER\n//- Since this reducer accesses both list and vis as props, it needs to be inside\n// index.js or a parent component to access both\n//- I don't think it would work if it was inside it's own reducer file\nconst getVisibleTodos = (list, filter) => {\n  // eslint-disable-next-line default-case\n  switch (filter) {\n    case SHOW_ALL:\n      return list;\n\n    case SHOW_COMPLETED:\n      return list.filter(item => item.completed);\n\n    case SHOW_NOT_COMPLETED:\n      return list.filter(item => !item.completed);\n\n    default:\n      throw new Error('Unknown filter: ' + filter);\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    //- Pass vis/ActionType as a prop and show user particular view depending\n    // on the action type passed to it\n    list: getVisibleTodos(state.list, state.vis),\n\n    //- vis is visReducer which returns an action type\n    //initial actiontype/state = SHOW_ALL\n    vis: state.vis\n  };\n};\n\n//-Firing custom action Creator to change filter type & change view depending\n// on filter type\n//-vis is basically a toggle\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetVisibilityFilter: filter => dispatch(setVisibilityFilter(filter))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(VisibleTodoList);\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'DELETE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const TOGGLE_COMPLETION = 'TOGGLE_COMPLETION';\n\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const SHOW_COMPLETED = 'SHOW_COMPLETED';\nexport const SHOW_NOT_COMPLETED = 'SHOW_NOT_COMPLETED';\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\n","import {\n  ADD_TODO,\n  REMOVE_TODO,\n  EDIT_TODO,\n  TOGGLE_COMPLETION,\n  SET_VISIBILITY_FILTER\n} from './types';\n\nexport const addTodo = taskName => {\n  return {\n    type: ADD_TODO,\n    payload: taskName\n  };\n};\n\nexport const removeTodo = todoId => {\n  return {\n    type: REMOVE_TODO,\n    payload: todoId\n  };\n};\n\nexport const editTodo = (todoId, updatedTodo, completedStatus) => {\n  return {\n    type: EDIT_TODO,\n    payload: { task: updatedTodo, id: todoId, completed: completedStatus }\n  };\n};\n\nexport const toggleCompletion = (todoId, task, completedStatus) => {\n  return {\n    type: TOGGLE_COMPLETION,\n    payload: { id: todoId, task: task, completed: completedStatus }\n  };\n};\n\n// Custom action that returns a reducer that returns ACTION TYPES\n//Could put this in it's own component if I wanted to to spread out logic\n// depending on the type of state it belongs to\nexport const setVisibilityFilter = filter => ({\n  type: SET_VISIBILITY_FILTER,\n  filter\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  addTodo,\n  removeTodo,\n  editTodo,\n  toggleCompletion\n} from './actions/list';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_NOT_COMPLETED } from './actions/types';\n\nimport AddTodoForm from './AddTodoForm';\nimport VisibleTodoList from './VisibleTodoList';\n\nclass TodoApp extends Component {\n  render() {\n    const { container } = styles;\n\n    return (\n      <div style={container}>\n        <h1>Redux TodoList</h1>\n        <AddTodoForm add={this.props.onAddTodo} />\n        <VisibleTodoList\n          remove={this.props.onRemoveTodo}\n          edit={this.props.onEditTodo}\n          toggleCompletion={this.props.onComplete}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddTodo: taskName => dispatch(addTodo(taskName)),\n    onRemoveTodo: id => dispatch(removeTodo(id)),\n    onEditTodo: (id, updatedTask, completedStatus) =>\n      dispatch(editTodo(id, updatedTask, completedStatus)),\n    onComplete: (id, task, completedStatus) =>\n      dispatch(toggleCompletion(id, task, completedStatus))\n  };\n};\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(TodoApp);\n","import React, { Component } from 'react';\nimport TodoApp from './TodoApp';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoApp />\n      </div>\n    );\n  }\n}\n","import uuid from 'uuid/v4';\nimport {\n  ADD_TODO,\n  REMOVE_TODO,\n  EDIT_TODO,\n  TOGGLE_COMPLETION\n} from '../actions/types';\n\nconst initialState = [\n  { task: 'Eat', id: uuid(), completed: false },\n  { task: 'Sleep', id: uuid(), completed: false },\n  { task: 'Repeat', id: uuid(), completed: false },\n  { task: 'Code', id: uuid(), completed: true },\n  { task: 'Gym', id: uuid(), completed: false },\n  { task: 'Coffee', id: uuid(), completed: false }\n];\n\nconst listReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      const newTask = { task: action.payload, id: uuid(), completed: false };\n      // console.log('newTask', newTask);\n      return [newTask, ...state];\n\n    case REMOVE_TODO:\n      return [...state.filter(item => item.id !== action.payload)];\n\n    case EDIT_TODO:\n      // console.log(action.payload);\n      // const updatedTodo = action.payload;\n      return [\n        ...state.map(item =>\n          item.id === action.payload.id ? action.payload : item\n        )\n      ];\n\n    case TOGGLE_COMPLETION:\n      console.log('action.payload', action.payload);\n      const completedTodo = {\n        ...action.payload,\n        completed: !action.payload.completed\n      };\n      return [\n        ...state.map(item =>\n          item.id === action.payload.id ? completedTodo : item\n        )\n      ];\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;\n","import { SHOW_ALL, SET_VISIBILITY_FILTER } from '../actions/types';\n\n// Custom Reducer to fire a particular reducer depending on what action type\n// is passed to it\n// Default view is SHOW_ALL\nconst visFilterReducer = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      // visReducer returns SHOW_ALL, SHOW_COMPLETED, SHOW_NOT_COMPLETED\n      console.log(action);\n      return action.filter;\n\n    default:\n      return state;\n  }\n};\n\nexport default visFilterReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\n\nimport listReducer from './reducers/listReducer';\nimport visFilterReducer from './reducers/visFilterReducer';\n\nconst rootReducer = combineReducers({\n  list: listReducer,\n  vis: visFilterReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}